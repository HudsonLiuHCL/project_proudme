import { CredentialsProviderError } from "@aws-sdk/property-provider";
import { exec } from "child_process";
import { promisify } from "util";
import { getValidatedProcessCredentials } from "./getValidatedProcessCredentials";
export const resolveProcessCredentials = async (profileName, profiles) => {
    const profile = profiles[profileName];
    if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== undefined) {
            const execPromise = promisify(exec);
          ***REMOVED***
                const { stdout } = await execPromise(credentialProcess);
                let data;
              ***REMOVED***
                    data = JSON.parse(stdout.trim());
            ***REMOVED***
                catch {
                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            ***REMOVED***
                return getValidatedProcessCredentials(profileName, data);
        ***REMOVED***
            catch (error) {
                throw new CredentialsProviderError(error.message);
        ***REMOVED***
    ***REMOVED***
        else {
            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
    ***REMOVED***
***REMOVED***
    else {
        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
***REMOVED***
};
