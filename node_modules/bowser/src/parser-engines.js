import Utils from './utils.js';
import { ENGINE_MAP } from './constants.js';

/*
 * More specific goes first
 */
export default [
  /* EdgeHTML */
  {
    test(parser) {
      return parser.getBrowserName(true) === 'microsoft edge';
***REMOVED***,
    describe(ua) {
      const isBlinkBased = /\sedg\//i.test(ua);

      // return blink if it's blink-based one
      if (isBlinkBased) {
        return {
          name: ENGINE_MAP.Blink,
    ***REMOVED***;
  ***REMOVED***

      // otherwise match the version and return EdgeHTML
      const version = Utils.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, ua);

      return {
        name: ENGINE_MAP.EdgeHTML,
        version,
  ***REMOVED***;
***REMOVED***,
***REMOVED***,

  /* Trident */
  {
    test: [/trident/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Trident,
  ***REMOVED***;

      const version = Utils.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
  ***REMOVED***

      return engine;
***REMOVED***,
***REMOVED***,

  /* Presto */
  {
    test(parser) {
      return parser.test(/presto/i);
***REMOVED***,
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Presto,
  ***REMOVED***;

      const version = Utils.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
  ***REMOVED***

      return engine;
***REMOVED***,
***REMOVED***,

  /* Gecko */
  {
    test(parser) {
      const isGecko = parser.test(/gecko/i);
      const likeGecko = parser.test(/like gecko/i);
      return isGecko && !likeGecko;
***REMOVED***,
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.Gecko,
  ***REMOVED***;

      const version = Utils.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
  ***REMOVED***

      return engine;
***REMOVED***,
***REMOVED***,

  /* Blink */
  {
    test: [/(apple)?webkit\/537\.36/i],
    describe() {
      return {
        name: ENGINE_MAP.Blink,
  ***REMOVED***;
***REMOVED***,
***REMOVED***,

  /* WebKit */
  {
    test: [/(apple)?webkit/i],
    describe(ua) {
      const engine = {
        name: ENGINE_MAP.WebKit,
  ***REMOVED***;

      const version = Utils.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, ua);

      if (version) {
        engine.version = version;
  ***REMOVED***

      return engine;
***REMOVED***,
***REMOVED***,
];
