const STORE_NAME = "IdentityIds";
export class IndexedDbStorage {
    constructor(dbName = "aws:cognito-identity-ids") {
        this.dbName = dbName;
***REMOVED***
    getItem(key) {
        return this.withObjectStore("readonly", (store) => {
            const req = store.get(key);
            return new Promise((resolve) => {
                req.onerror = () => resolve(null);
                req.onsuccess = () => resolve(req.result ? req.result.value : null);
            ***REMOVED***
    ***REMOVED***).catch(() => null);
***REMOVED***
    removeItem(key) {
        return this.withObjectStore("readwrite", (store) => {
            const req = store.delete(key);
            return new Promise((resolve, reject) => {
                req.onerror = () => reject(req.error);
                req.onsuccess = () => resolve();
            ***REMOVED***
        ***REMOVED***
***REMOVED***
    setItem(id, value) {
        return this.withObjectStore("readwrite", (store) => {
            const req = store.put({ id, value ***REMOVED***
            return new Promise((resolve, reject) => {
                req.onerror = () => reject(req.error);
                req.onsuccess = () => resolve();
            ***REMOVED***
        ***REMOVED***
***REMOVED***
    getDb() {
        const openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise((resolve, reject) => {
            openDbRequest.onsuccess = () => {
                resolve(openDbRequest.result);
        ***REMOVED***;
            openDbRequest.onerror = () => {
                reject(openDbRequest.error);
        ***REMOVED***;
            openDbRequest.onblocked = () => {
                reject(new Error("Unable to access DB"));
        ***REMOVED***;
            openDbRequest.onupgradeneeded = () => {
                const db = openDbRequest.result;
                db.onerror = () => {
                    reject(new Error("Failed to create object store"));
            ***REMOVED***;
                db.createObjectStore(STORE_NAME, { keyPath: "id" ***REMOVED***
        ***REMOVED***;
        ***REMOVED***
***REMOVED***
    withObjectStore(mode, action) {
        return this.getDb().then((db) => {
            const tx = db.transaction(STORE_NAME, mode);
            tx.oncomplete = () => db.close();
            return new Promise((resolve, reject) => {
                tx.onerror = () => reject(tx.error);
                resolve(action(tx.objectStore(STORE_NAME)));
            ***REMOVED***
                db.close();
                throw err;
            ***REMOVED***
        ***REMOVED***
***REMOVED***
}
