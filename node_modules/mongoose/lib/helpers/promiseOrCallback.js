'use strict';

const PromiseProvider = require('../promise_provider');
const immediate = require('./immediate');

const emittedSymbol = Symbol('mongoose:emitted');

module.exports = function promiseOrCallback(callback, fn, ee, Promise) {
  if (typeof callback === 'function') {
  ***REMOVED***
      return fn(function(error) {
        if (error != null) {
          if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {
            error[emittedSymbol] = true;
            ee.emit('error', error);
      ***REMOVED***
        ***REMOVED***
            callback(error);
      ***REMOVED*** catch (error) {
            return immediate(() => {
              throw error;
            ***REMOVED***
      ***REMOVED***
          return;
    ***REMOVED***
        callback.apply(this, arguments);
      ***REMOVED***
***REMOVED*** catch (error) {
      if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {
        error[emittedSymbol] = true;
        ee.emit('error', error);
  ***REMOVED***

      return callback(error);
***REMOVED***
***REMOVED***

  Promise = Promise || PromiseProvider.get();

  return new Promise((resolve, reject) => {
    fn(function(error, res) {
      if (error != null) {
        if (ee != null && ee.listeners != null && ee.listeners('error').length > 0 && !error[emittedSymbol]) {
          error[emittedSymbol] = true;
          ee.emit('error', error);
    ***REMOVED***
        return reject(error);
  ***REMOVED***
      if (arguments.length > 2) {
        return resolve(Array.prototype.slice.call(arguments, 1));
  ***REMOVED***
      resolve(res);
    ***REMOVED***
  ***REMOVED***
};
