'use strict';

/*!
 * ignore
 */

const MongooseMap = require('../types/map');
const SchemaMapOptions = require('../options/SchemaMapOptions');
const SchemaType = require('../schematype');
/*!
 * ignore
 */

class Map extends SchemaType {
  constructor(key, options) {
    super(key, options, 'Map');
    this.$isSchemaMap = true;
***REMOVED***

  set(option, value) {
    return SchemaType.set(option, value);
***REMOVED***

  cast(val, doc, init) {
    if (val instanceof MongooseMap) {
      return val;
***REMOVED***

    const path = this.path;

    if (init) {
      const map = new MongooseMap({}, path, doc, this.$__schemaType);

      if (val instanceof global.Map) {
        for (const key of val.keys()) {
          let _val = val.get(key);
          if (_val == null) {
            _val = map.$__schemaType._castNullish(_val);
      ***REMOVED***
            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key ***REMOVED***
      ***REMOVED***
          map.$init(key, _val);
    ***REMOVED***
  ***REMOVED***
        for (const key of Object.keys(val)) {
          let _val = val[key];
          if (_val == null) {
            _val = map.$__schemaType._castNullish(_val);
      ***REMOVED***
            _val = map.$__schemaType.cast(_val, doc, true, null, { path: path + '.' + key ***REMOVED***
      ***REMOVED***
          map.$init(key, _val);
    ***REMOVED***
  ***REMOVED***

      return map;
***REMOVED***

    return new MongooseMap(val, path, doc, this.$__schemaType);
***REMOVED***

  clone() {
    const schematype = super.clone();

    if (this.$__schemaType != null) {
      schematype.$__schemaType = this.$__schemaType.clone();
***REMOVED***
    return schematype;
***REMOVED***
}

/**
 * This schema type's name, to defend against minifiers that mangle
 * function names.
 *
 * @api public
 */
Map.schemaName = 'Map';

Map.prototype.OptionsConstructor = SchemaMapOptions;

Map.defaultOptions = {};

module.exports = Map;
